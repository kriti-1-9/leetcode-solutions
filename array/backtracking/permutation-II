class Solution {
public:
    void getperm(vector<int>& nums, int idx, vector<vector<int>>& ans) {
        if (idx == nums.size()) {
            ans.push_back(nums);
            return;
        }
        unordered_set<int> used;
        for (int i = idx; i < nums.size(); i++) {
            if (used.find(nums[i]) != used.end()) continue; // Skip duplicates
            used.insert(nums[i]);
            swap(nums[idx], nums[i]);
            getperm(nums, idx + 1, ans);
            swap(nums[idx], nums[i]);
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end()); // Sort to handle duplicates
        getperm(nums, 0, ans);
        return ans;
    }
};
